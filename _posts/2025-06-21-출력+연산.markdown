---
layout: post
title:  "출력+연산"
date:   2025-06-21 05:04:00 +0900
categories: [CS]
---
# 출력+연산 문제들을 빠르게 정리한다.

## 문제 영역

### **문제 설명**
문자열 `str`과 정수 `n`이 주어집니다.

`str`이 `n`번 반복된 문자열을 만들어 출력하는 코드를 작성해 보세요.

### 제한사항
- 1 ≤ `str`의 길이 ≤ 10
- 1 ≤ `n` ≤ 5

### 입출력 예

입력 #1
```
string 5
```
출력 #1
```
stringstringstringstringstring
```

## 설계 영역
반복문을 사용하기
1. 반복할 문자열과 반복 횟수 나누기
2. 반복문을 사용해서 반복 횟수만큼 문자열 출력을 반복하기

## 결과 코드
```js
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let input = [];

rl.on('line', function (line) {
    input = line.split(' ');
}).on('close', function () {
    const str = input[0];
    const n = Number(input[1]);

    let answer = "";
    for (let i = 0; i < n; i++) {
        answer += str;
    }

    console.log(answer);
});
```

## 느낀점
1. const와 let의 차이는 재할당이 가능한지 아닌지에 따른 차이
2. 반복문은 다른 C 등의 언어와 비슷함
3. const와 let을 잘 구분해 사용하는 것이 중요하며, js에서 자동 할당하긴 하지만 변하지 않는 변수는 const형으로 선언언 하여 오류가 없도록 만들기

## 다른 사람의 코드
```js
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let input = [];

rl.on('line', function (line) {
    input = line.split(' ');
}).on('close', function () {
    str = input[0];
    n = Number(input[1]);
    console.log(str.repeat(n));
});
```

문자열에 repeat를 하면 반복할 수 있다. 신기하면서도 코드를 줄일 수 있어 유용한 방법인듯.

---

## 문제 영역

### **문제 설명**
영어 알파벳으로 이루어진 문자열 str이 주어집니다. 각 알파벳을 대문자는 소문자로 소문자는 대문자로 변환해서 출력하는 코드를 작성해 보세요.

### 제한사항
- 1 ≤ `str`의 길이 ≤ 20
- `str`은 알파벳으로 이루어진 문자열입니다.

### 입출력 예

입력 #1
```
aBcDeFg
```
출력 #1
```
AbCdEfG
```

## 설계 영역
1. 아스키 코드로 환산
2. 대문자 영역일 경우 소문자 영역이 되도록 마이너스(혹은 플러스)
3. 소문자 영역일 경우 대문자 영역이 되도록 플러스(혹은 마이너스)
4. 각 계산마다 결과를 더해주고 끝나면 출력력

## 결과 코드
```js

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let input = [];

rl.on('line', function (line) {
    input = [line];
}).on('close', function () {
    /*
    ## 설계 영역
1. 아스키 코드로 환산
2. 대문자 영역일 경우 소문자 영역이 되도록 마이너스(혹은 플러스)
3. 소문자 영역일 경우 대문자 영역이 되도록 플러스(혹은 마이너스)
4. 각 계산마다 결과를 더해주고 끝나면 출력력
*/
    str = input[0];

    let answer = "";
    const length = str.length;


    for (let i = 0; i < length; i++) {
        // 대문자 영역은 65~90, 소문자 영역은 97~122. 97-65 = 32
        if (str.charCodeAt(i) >= 65 && str.charCodeAt(i) <= 90) {
            answer += String.fromCharCode((str.charCodeAt(i) + 32));
        }
        else {
            answer += String.fromCharCode((str.charCodeAt(i) - 32));
        }
    }

    console.log(answer);
});
```

## 느낀점
1. 대문자, 소문자 스케일링 하는 법 알아두기. 문제에서 주면 구현할 수 있어야 함함
2. length로 길이 알 수 있음

## 다른 사람의 코드
```js
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let input = [];

rl.on('line', function (line) {
    input = [line];
}).on('close',function(){
    str = input[0].split('');
    str.forEach((value, index) => {
        if (value === value.toUpperCase()) {
            str[index] = value.toLowerCase();
        } else {
            str[index] = value.toUpperCase();
        }
    });
    console.log(str.join(''));
});

```

헉. 어렵게 구현해놨더니 toUpperCase라는 좋은 방법이 있었음. 그리고 foreach문 사용하면 length 몰라도 해결 가능.

---

## 문제 영역

### **문제 설명**
다음과 같이 출력하도록 코드를 작성해 주세요.

출력 #1
```
!@#$%^&*(\'"<>?:;
```

## 설계 영역
1. \를 이용해서 나타내기

## 결과 코드
```js
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.on('close', function () {
    console.log("\!\@\#\$\%\^\&\*\(\\\'\"\<\>\?\:\;");
});
```

## 느낀점
1. 특별할 게 없는 문제. "\" 이스케이프 문자를 알고 있었다면 쉬움움

